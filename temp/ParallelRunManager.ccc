#include "globals.hh"
#include "ParallelRunManager.hh"
#include "G4Timer.hh"

void * GoNode(void *arg);
int run_now = 1;

void ParallelRunManager::DoEventLoop(G4int n_event,const char* macroFile,G4int n_select)
{

   int res;
   pthread_t a_thread;
   void *thread_result;
   int q;
   res= pthread_create(&a_thread, NULL, GoNode, NULL);
   if (res!=0) {
      perror("Thread creation failed");
      exit(EXIT_FAILURE);
   }

   int print_count1 = 0;

   while (print_count1++ <20 ) {
      if (run_now == 1) {


         printf("1\n");
         run_now =2;
      }
      else {
         sleep(1);
      }
   }
   if (verboseLevel>0)
   {
      timer->Start();
   }

   G4String msg;
   if (macroFile!=0)
   {
      if (n_select<0) n_select = n_event;
      msg = "/control/execute ";
      msg += macroFile;
   }
   else
   {
      n_select = -1;
   }

// Event loop
   G4int i_event;
   for ( i_event=0; i_event<n_event; i_event++ )
   {
      currentEvent = GenerateEvent(i_event);
      eventManager->ProcessOneEvent(currentEvent);
      AnalyzeEvent(currentEvent);
      UpdateScoring();
      if (i_event<n_select) G4UImanager::GetUIpointer()->ApplyCommand(msg);
      StackPreviousEvent(currentEvent);
      currentEvent = 0;
      if (runAborted) break;
   }

   if (verboseLevel>0)
   {
      timer->Stop();
      G4cout << "Run terminated." << G4endl;
      G4cout << "Run Summary" << G4endl;
      if (runAborted)
      {
         G4cout << "  Run Aborted after " << i_event << " events processed." << G4endl;
      }
      else
      {
         G4cout << "  Number of events processed : " << n_event << G4endl;
      }
      G4cout << "  "  << *timer << G4endl;
   }

   printf("Waiting for thread to finish...\n");
   res = pthread_join(a_thread, &thread_result);
   if (res!=0) {
      perror("Thread foin failed");
      exit(EXIT_FAILURE);
   }



   printf("Thread joined, it returned %s\n", (char *)thread_result);

   exit(EXIT_SUCCESS);
}

void * GoNode(void *arg) {
   printf("\n thread_function is running.\n ");

   int q;
   int print_count2 = 0;

   while (print_count2++ <20 ) {
      if (run_now == 2) {
         printf("2\n");

         run_now =1;
      }
      else {
         sleep(1);
      }
   }



   pthread_exit("Thank you for the CPU time duuuuuuuuude.");

}
